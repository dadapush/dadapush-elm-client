{-
   DaDaPush Public API
   DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.

   The version of the OpenAPI document: v1
   Contact: contacts@dadapush.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.DaDaPushMessage exposing (createMessage, deleteMessage, getMessage, getMessages)

import Data.Result_ as Result_ exposing (Result_)
import Data.MessagePushRequest as MessagePushRequest exposing (MessagePushRequest)
import Data.ResultOfMessagePushResponse as ResultOfMessagePushResponse exposing (ResultOfMessagePushResponse)
import Data.ResultOfMessageObject as ResultOfMessageObject exposing (ResultOfMessageObject)
import Data.ResultOfPageResponseOfMessageObject as ResultOfPageResponseOfMessageObject exposing (ResultOfPageResponseOfMessageObject)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url




basePath : String
basePath =
    "https://www.dadapush.com"


{-| <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>30 request per 1m</li><li>500 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
-}
createMessage :
    { xChannelToken : Maybe (String)
    } -> 
    { onSend : Result Http.Error ResultOfMessagePushResponse -> msg


    , body : MessagePushRequest


    }
    -> Cmd msg
createMessage headers params =
    Http.request
        { method = "POST"
        , headers = List.filterMap identity [Maybe.map (Http.header "x-channel-token" ) headers.xChannelToken]
        , url = Url.crossOrigin basePath
            ["api", "v1", "message"]
            []
        , body = Http.jsonBody <| MessagePushRequest.encode params.body
        , expect = Http.expectJson params.onSend ResultOfMessagePushResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
-}
deleteMessage :
    { xChannelToken : Maybe (String)
    } -> 
    { onSend : Result Http.Error Result_ -> msg



    , messageId : Int

    }
    -> Cmd msg
deleteMessage headers params =
    Http.request
        { method = "DELETE"
        , headers = List.filterMap identity [Maybe.map (Http.header "x-channel-token" ) headers.xChannelToken]
        , url = Url.crossOrigin basePath
            ["api", "v1", "message",  String.fromInt params.messageId]
            []
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend Result_.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
-}
getMessage :
    { xChannelToken : Maybe (String)
    } -> 
    { onSend : Result Http.Error ResultOfMessageObject -> msg



    , messageId : Int

    }
    -> Cmd msg
getMessage headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [Maybe.map (Http.header "x-channel-token" ) headers.xChannelToken]
        , url = Url.crossOrigin basePath
            ["api", "v1", "message",  String.fromInt params.messageId]
            []
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend ResultOfMessageObject.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


{-| <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>45 request per 1m</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
-}
getMessages :
    { xChannelToken : Maybe (String)
    } -> 
    { onSend : Result Http.Error ResultOfPageResponseOfMessageObject -> msg




    , page : Int    , pageSize : Int
    }
    -> Cmd msg
getMessages headers params =
    Http.request
        { method = "GET"
        , headers = List.filterMap identity [Maybe.map (Http.header "x-channel-token" ) headers.xChannelToken]
        , url = Url.crossOrigin basePath
            ["api", "v1", "messages"]
            (List.filterMap identity [Just (Url.string "page" <| String.fromInt params.page), Just (Url.string "pageSize" <| String.fromInt params.pageSize)])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend ResultOfPageResponseOfMessageObject.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
